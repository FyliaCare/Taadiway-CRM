// Taadiway CRM - Delivery & Inventory Management System
// Prisma Schema for managing client portals, inventory tracking, and sales

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole  @default(USER)
  phone          String?
  whatsappNumber String?
  isActive       Boolean   @default(true)
  isSuperAdmin   Boolean   @default(false)
  lastLoginAt    DateTime?
  createdById    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  adminProfile     AdminProfile?
  clientProfile    ClientProfile?
  salesRecorded    Sale[]            @relation("SaleRecordedBy")
  inventoryUpdates InventoryLog[]    @relation("InventoryUpdatedBy")
  notifications    Notification[]
  deliveryReviews  DeliveryRequest[] @relation("DeliveryReviewedBy")
  deliveryAssignments DeliveryRequest[] @relation("DeliveryAssignedTo")
  createdBy        User?             @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers     User[]            @relation("UserCreatedBy")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  STAFF
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// PROFILES
// ============================================

// Admin Profile - Taadiway staff members
model AdminProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  position             String?
  department           String?
  canManageClients     Boolean  @default(true)
  canRecordSales       Boolean  @default(true)
  canManageInventory   Boolean  @default(true)
  canManageUsers       Boolean  @default(false)
  canViewReports       Boolean  @default(true)
  canManageSettings    Boolean  @default(false)
  canDeleteData        Boolean  @default(false)
  canManagePayments    Boolean  @default(false)
  canExportData        Boolean  @default(true)
  canManageProducts    Boolean  @default(true)
  canApproveRefunds    Boolean  @default(false)
  maxDiscountPercent   Float?   @default(0)
  restrictedToClients  String[] // Array of client IDs they can access
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Client Profile - Vendors/Shops using the portal
model ClientProfile {
  id                   String             @id @default(cuid())
  userId               String             @unique
  businessName         String
  businessType         String?
  businessAddress      String?            @db.Text
  contactPerson        String?
  subscriptionStatus   SubscriptionStatus @default(TRIAL)
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  notifyByEmail        Boolean            @default(true)
  notifyByWhatsApp     Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      Product[]
  sales         Sale[]
  subscription  Subscription?
  notifications Notification[]
  deliveryRequests DeliveryRequest[]
  autoApprovalRules AutoApprovalRule[]
  invoices      Invoice[]
  
  @@index([subscriptionStatus])
  @@index([subscriptionEnd])
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

// ============================================
// SUBSCRIPTION & BILLING
// ============================================

model Subscription {
  id                   String             @id @default(cuid())
  clientProfileId      String             @unique
  plan                 SubscriptionPlan   @default(BASIC)
  amount               Float
  currency             String             @default("NGN")
  startDate            DateTime
  endDate              DateTime
  autoRenew            Boolean            @default(true)
  lastPaymentDate      DateTime?
  nextPaymentDate      DateTime?
  paymentMethod        String?
  stripeCustomerId     String?            @unique
  stripeSubscriptionId String?            @unique
  status               SubscriptionStatus @default(ACTIVE)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  
  clientProfile ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  payments      Payment[]
  
  @@index([status])
  @@index([endDate])
}

enum SubscriptionPlan {
  BASIC
  STANDARD
  PREMIUM
}

model Payment {
  id             String        @id @default(cuid())
  subscriptionId String
  amount         Float
  currency       String        @default("NGN")
  paymentDate    DateTime      @default(now())
  paymentMethod  String
  transactionRef String?       @unique
  status         PaymentStatus @default(PENDING)
  metadata       Json?
  createdAt      DateTime      @default(now())
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  
  @@index([status])
  @@index([paymentDate])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// ============================================
// INVENTORY MANAGEMENT
// ============================================

// Products stored with Taadiway for each client
model Product {
  id              String   @id @default(cuid())
  clientProfileId String
  name            String
  description     String?  @db.Text
  sku             String?
  category        String?
  unitPrice       Float?
  costPrice       Float?
  image           String?
  initialStock    Int      @default(0)
  currentStock    Int      @default(0)
  reorderLevel    Int?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  clientProfile ClientProfile  @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  sales         SaleItem[]
  inventoryLogs InventoryLog[]
  deliveryRequestItems DeliveryRequestItem[]
  
  @@index([clientProfileId])
  @@index([isActive])
  @@index([currentStock])
}

model InventoryLog {
  id            String        @id @default(cuid())
  productId     String
  type          InventoryType
  quantity      Int
  previousStock Int
  newStock      Int
  reason        String?
  reference     String?
  updatedById   String
  createdAt     DateTime      @default(now())
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedBy User    @relation("InventoryUpdatedBy", fields: [updatedById], references: [id])
  
  @@index([productId])
  @@index([type])
  @@index([createdAt])
}

enum InventoryType {
  RESTOCK
  SALE
  ADJUSTMENT
  DAMAGE
  RETURN
}

// ============================================
// SALES & TRANSACTIONS
// ============================================

model Sale {
  id              String     @id @default(cuid())
  clientProfileId String
  saleNumber      String     @unique
  customerName    String?
  customerPhone   String?
  deliveryAddress String?    @db.Text
  totalAmount     Float
  status          SaleStatus @default(PENDING)
  saleDate        DateTime   @default(now())
  deliveryDate    DateTime?
  notes           String?    @db.Text
  recordedById    String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  clientProfile ClientProfile  @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  recordedBy    User           @relation("SaleRecordedBy", fields: [recordedById], references: [id])
  items         SaleItem[]
  notifications Notification[]
  invoices      Invoice[]
  
  @@index([clientProfileId])
  @@index([status])
  @@index([saleDate])
}

enum SaleStatus {
  PENDING
  DELIVERED
  CANCELLED
}

model SaleItem {
  id         String   @id @default(cuid())
  saleId     String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@index([saleId])
  @@index([productId])
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id              String               @id @default(cuid())
  clientProfileId String?
  userId          String
  type            NotificationType
  title           String
  message         String               @db.Text
  channels        NotificationChannel[]
  status          NotificationStatus   @default(PENDING)
  sentAt          DateTime?
  saleId          String?
  metadata        Json?
  createdAt       DateTime             @default(now())
  
  clientProfile ClientProfile? @relation(fields: [clientProfileId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  sale          Sale?          @relation(fields: [saleId], references: [id])
  
  @@index([clientProfileId])
  @@index([status])
  @@index([createdAt])
}

enum NotificationType {
  SALE_RECORDED
  LOW_STOCK
  SUBSCRIPTION_EXPIRING
  SUBSCRIPTION_EXPIRED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  DELIVERY_REQUEST_CREATED
  DELIVERY_REQUEST_APPROVED
  DELIVERY_REQUEST_REJECTED
  DELIVERY_SCHEDULED
  DELIVERY_DISPATCHED
  DELIVERY_COMPLETED
  INVOICE_GENERATED
  RECEIPT_GENERATED
}

enum NotificationChannel {
  EMAIL
  WHATSAPP
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

// ============================================
// DELIVERY REQUESTS (Advanced Vendor Portal)
// ============================================

model DeliveryRequest {
  id                  String          @id @default(cuid())
  clientProfileId     String
  requestNumber       String          @unique
  customerName        String
  customerPhone       String
  customerEmail       String?
  deliveryAddress     String          @db.Text
  paymentMethod       PaymentMethod
  paymentStatus       PaymentStatus   @default(PENDING)
  scheduledDate       DateTime?
  preferredTime       String?         // "morning", "afternoon", "evening"
  specialInstructions String?         @db.Text
  status              DeliveryStatus  @default(PENDING_APPROVAL)
  totalAmount         Float
  
  // Admin handling
  reviewedById        String?
  reviewedAt          DateTime?
  rejectionReason     String?         @db.Text
  approvedAt          DateTime?
  assignedTo          String?
  
  // Delivery tracking
  dispatchedAt        DateTime?
  deliveredAt         DateTime?
  deliveryProof       String?         // Photo URL
  customerSignature   String?         // Signature URL
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  clientProfile       ClientProfile   @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  items               DeliveryRequestItem[]
  reviewedBy          User?           @relation("DeliveryReviewedBy", fields: [reviewedById], references: [id])
  assignedToUser      User?           @relation("DeliveryAssignedTo", fields: [assignedTo], references: [id])
  invoices            Invoice[]
  
  @@index([clientProfileId])
  @@index([status])
  @@index([scheduledDate])
  @@index([requestNumber])
}

model DeliveryRequestItem {
  id                  String           @id @default(cuid())
  deliveryRequestId   String
  productId           String
  quantity            Int
  unitPrice           Float
  totalPrice          Float
  
  deliveryRequest     DeliveryRequest  @relation(fields: [deliveryRequestId], references: [id], onDelete: Cascade)
  product             Product          @relation(fields: [productId], references: [id])
  
  @@index([deliveryRequestId])
  @@index([productId])
}

model AutoApprovalRule {
  id                String      @id @default(cuid())
  clientProfileId   String
  name              String
  description       String?     @db.Text
  isActive          Boolean     @default(true)
  priority          Int         @default(0)
  
  // Rule conditions
  ruleType          RuleType    // CUSTOMER, PRODUCT, AMOUNT, TIME, COMBINED
  customerPhones    String[]    // For customer whitelist
  productIds        String[]    // For product whitelist
  maxAmount         Float?      // Auto-approve if total <= this
  minAmount         Float?      // Auto-approve if total >= this
  
  // Time conditions
  allowedDays       String[]    // ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]
  startTime         String?     // "09:00"
  endTime           String?     // "17:00"
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  clientProfile     ClientProfile @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  
  @@index([clientProfileId])
  @@index([isActive])
}

model Invoice {
  id                  String         @id @default(cuid())
  clientProfileId     String
  saleId              String?        @unique
  deliveryRequestId   String?
  invoiceNumber       String         @unique
  
  customerName        String
  customerEmail       String?
  customerPhone       String
  customerAddress     String?        @db.Text
  
  items               Json           // Detailed line items
  subtotal            Float
  taxAmount           Float          @default(0)
  discount            Float          @default(0)
  totalAmount         Float
  
  status              InvoiceStatus  @default(DRAFT)
  dueDate             DateTime?
  paidAt              DateTime?
  
  // Template & branding
  templateId          String?
  logoUrl             String?
  brandColor          String?
  customFields        Json?
  
  // Files
  pdfUrl              String?
  
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  
  clientProfile       ClientProfile  @relation(fields: [clientProfileId], references: [id], onDelete: Cascade)
  sale                Sale?          @relation(fields: [saleId], references: [id])
  deliveryRequest     DeliveryRequest? @relation(fields: [deliveryRequestId], references: [id])
  receipts            Receipt[]
  
  @@index([clientProfileId])
  @@index([status])
  @@index([invoiceNumber])
}

model Receipt {
  id              String    @id @default(cuid())
  invoiceId       String
  receiptNumber   String    @unique
  amountPaid      Float
  paymentMethod   String
  paymentDate     DateTime  @default(now())
  notes           String?   @db.Text
  pdfUrl          String?
  
  createdAt       DateTime  @default(now())
  
  invoice         Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
  @@index([receiptNumber])
}

enum PaymentMethod {
  PAYMENT_BEFORE_DELIVERY
  PAYMENT_ON_DELIVERY
  BANK_TRANSFER
  CARD
  CASH
  MOBILE_MONEY
}

enum DeliveryStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SCHEDULED
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  CANCELLED
}

enum RuleType {
  CUSTOMER
  PRODUCT
  AMOUNT
  TIME
  COMBINED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}